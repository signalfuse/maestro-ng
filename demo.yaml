# This is an example of a Maestro environment description file. It starts up a
# multi-node ZooKeeper cluster to serve a multi-node Kafka broker cluster that
# can be used for pub/sub and messaging.

name: demo

# By using an SSH tunnel to connect to your docker port, you can make
# docker listen only the localhost loopback interface.
# For example, by the following setting in /etc/default/docker
# DOCKER_OPTS="-H tcp://127.0.0.1:4243 -H unix:///var/run/docker.sock"
#
# Specify the parameters to connect to the SSH server here. These options
# match the ones accepted by
# https://github.com/jmagnusson/bgtunnel/blob/master/bgtunnel.py#L214
ssh_tunnel_config:
  ssh_user: vagrant # Defaults to the user running maestro
  ssh_port: 22 # Defaults to 22
  identify_file: "/path/to/id_rsa"
  silent: True # Defaults to False

ships:
  # docker_port remains at default 4243 on all our hosts
  vm1: {ip: &vm1ip 192.168.10.2}
  vm2: {ip: 192.168.11.2, timeout: 1, ssh_tunnel=False} # Do not use a ssh_tunnel to connect to this one

services:
  # 2-node ZooKeeper cluster.
  zookeeper:
    image: mpetazzoni/zookeeper:3.4.5
    instances:
      zk-node-1:
        ship: vm1
        ports: {client: 2181, peer: 2888, leader_election: 3888}
        lifecycle:
          running: [{type: tcp, port: client, max_wait: 10}]
        volumes:
          /var/lib/zookeeper: /home/vagrant/data/zookeeper
      zk-node-2:
        ship: vm2
        ports:
          client: 2181
          peer: 2888/tcp
          leader_election:
            exposed: 3888
            external: [ *vm1ip, 3888/tcp ]
        lifecycle:
          running: [{type: tcp, port: client, max_wait: 10}]
        volumes:
          /var/lib/zookeeper: /home/vagrant/data/zookeeper

  # 2-node Kafka cluster, requires ZooKeeper.
  kafka:
    image: mpetazzoni/kafka:latest
    requires: [zookeeper]
    env:
      KAFKA_CONFIG_ZOOKEEPER_BASE: /local/kafka/central
    instances:
      kafka-broker-1:
        ship: vm1
        ports: {broker: "9092:9092"}
        lifecycle:
          running: [{type: tcp, port: broker}]
        volumes:
          /var/lib/kafka: /home/vagrant/data/kafka
        env:
          KAFKA_CONFIG_BROKER_ID: 0
      kafka-broker-2:
        ship: vm2
        ports: {broker: "9092/tcp:9092/tcp"}
        lifecycle:
          running: [{type: tcp, port: broker}]
        volumes:
          /var/lib/kafka: /home/vagrant/data/kafka
        env:
          KAFKA_CONFIG_BROKER_ID: 1

  envtest:
    image: stackbrew/ubuntu
    wants_info: [ zookeeper, kafka ]
    instances:
      envtest:
        ship: vm1
        env:
          FOO: "bar test"
        cmd: env
